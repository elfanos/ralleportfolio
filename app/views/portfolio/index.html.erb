<script>
$(document).ready(function(){
  console.log("jak");
  var procentOfScreen = 0.75;
  var screenInterval;
  var loadingContent = document.getElementById("load-container");
  var resizeContainer = document.getElementById("resize-container");
  var pageWrapper = document.getElementById("page-wrapper");
  var resizeLetters = document.getElementById("loading-list");
  var nodeKeeper = {};
  var resizeLetterKeeper = {};

  var mapArray = [
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0]
  ]

  //loading elements class/id
  var letterClassInLoading = {
      l: "loading-l",
      o: "loading-o",
      a: "loading-a",
      d: "loading-d",
      i: "loading-i",
      n: "loading-n",
      g: "loading-g"
  };
  //resizing elements
  var letterClassInResize = {
      r: 'resize-r',
      e: 'resize-e',
      s: 'resize-s',
      i: 'resize-ione',
      z: 'resize-z',
      i2: 'resize-itwo',
      n: 'resize-n',
      g: 'resize-g'
  };

  var loadingAnimations = {
    resizeLoad: 'loaded'
  };
  var navBars = {
    navMusic: document.getElementById("navMusic"),
    navAbout: document.getElementById("navAbout"),
    navProjects: document.getElementById("navProjects"),
    navContact: document.getElementById("navContact")
  };
  function init(){
      // should be applied on resiz
      hideDive(pageWrapper);
    var screenHeight = $(window).height();
    var screenWidth = $(window).width();

    drawLoadingContent();
    drawResizeAndLoadText();
    hideOpacityResize();
    redrawChildNodes(0,loadingContent.childNodes,  randomChild());
    startvibrate(0);
    lightingEffect();


    $(window).on('resize', function () {
      //resize just happened, pixels changed
      console.log("resizing");
      $('body').removeClass(loadingAnimations.resizeLoad);

    });
    function resizingInterval(){
      var screenInterval = setInterval(function(){
        $('body').addClass(loadingAnimations.resizeLoad);
      },1500);

      return screenInterval;
    }
    function setResizeInterval(screenInterval){
        var _screen = screenInterval;
        console.log("int intervall intervall");
        _screen = setInterval(function () {

            if ($('body').hasClass('state-animating'))
                return;

            if (screenWidth  != $(window).width() || screenHeight != $(window).height()) {

                screenWidth = $(window).width();
                screenHeight = $(window).height();

                $('body').removeClass('loaded');
//                $('.overlay-resize').removeClass('state-visible');
            }
            window.location.reload();

        }, 3000);
      }


  }

  function calculateScreenWidth(width, procent){
    procentHigh = (width*procent);
    return width - procentHigh;
  }
  function calculateScreenHeight(height, procent){
    procentHigh = (height*procent);
    return height - procentHigh;
  }
  function createLoadingContent(){
    return $("<div/>")   // creates a div element
           .attr("id", "some")  // adds the id
           .addClass("loading-content")   // add a classöööööö
           .html("<div></div>");
  }


  function drawResizeAndLoadText() {
      for(var i = 0; i < Object.size(letterClassInResize); i++){
          attributeForEachResizeLetter(i);
      }

  }
  
  /**
   * Give each char a own class property
   *
   * @param val
   * */
  function attributeForEachResizeLetter(val) {
      switch (val){
          case 0:
              var list = document.createElement('li');
              list.className = letterClassInResize.r;
              list.textContent = "r";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["r"] = document.
              getElementsByClassName(letterClassInResize.r);
              break;
          case 1:
              var list = document.createElement('li');
              list.className = letterClassInResize.e;
              list.textContent = "e";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["e"] = document.
              getElementsByClassName(letterClassInResize.e);
              break;
          case 2:
              var list = document.createElement('li');
              list.className = letterClassInResize.s;
              list.textContent = "s";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["s"] = document.
              getElementsByClassName(letterClassInResize.s);
              break;
          case 3:
              var list = document.createElement('li');
              list.className = letterClassInResize.i;
              list.textContent = "i";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["i"] = document.
              getElementsByClassName(letterClassInResize.r);
              break;
          case 4:
              var list = document.createElement('li');
              list.className = letterClassInResize.z;
              list.textContent = "z";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["z"] = document.
              getElementsByClassName(letterClassInResize.z);
              break;
          case 5:
              var list = document.createElement('li');
              list.className = letterClassInResize.i2;
              list.textContent = "i";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["i2"] = document.
              getElementsByClassName(letterClassInResize.i2);
              break;
          case 6:
              var list = document.createElement('li');
              list.className = letterClassInResize.n;
              list.textContent = "n";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["n"] = document.
              getElementsByClassName(letterClassInResize.n);
              break;
          case 7:
              var list = document.createElement('li');
              list.className = letterClassInResize.g;
              list.textContent = "g";
              resizeLetters.appendChild(list);
              resizeLetterKeeper["g"] = document.
              getElementsByClassName(letterClassInResize.g);
              break;
      }
  }

  /***
   * Timer between each vibrating animation
   * and how many times it should occure
   *
   * @param margin
   * */
  function startvibrate(margin) {
      var counter = 0;
      var interval = setInterval(function () {
          counter++;
          letterVibrationsRight(margin)
          if(counter > 5){
              clearInterval(interval);
          }
      },1000);

  }
  function hideOpacityResize() {
      document.getElementsByClassName("resize-r")[0].style.opacity = 0;
      document.getElementsByClassName("resize-e")[0].style.opacity = 0;
      document.getElementsByClassName("resize-s")[0].style.opacity = 0;
      document.getElementsByClassName("resize-ione")[0].style.opacity = 0;
      document.getElementsByClassName("resize-z")[0].style.opacity = 0;
      document.getElementsByClassName("resize-itwo")[0].style.opacity = 0;
      document.getElementsByClassName("resize-n")[0].style.opacity = 0;
      document.getElementsByClassName("resize-g")[0].style.opacity = 0;

  }
  /***
   * Bouncing effect on elements
   * in the list
   *
   * @param margin
   * */
  function letterVibrationsRight(margin) {
      setTimeout(function () {

          //console.log(document.getElementsByClassName("resize-r"));
          //document.getElementsByClassName("resize-r")[0].style.display = "inline-block";
          margin += 0.5;
          if(margin < 2) {
              document.getElementsByClassName("resize-r")[0].style.marginRight = margin + "px";
              document.getElementsByClassName("resize-z")[0].style.marginRight = margin + "px";
              document.getElementsByClassName("resize-s")[0].style.marginRight = margin + "px";
              document.getElementsByClassName("resize-r")[0].style.marginBottom = margin + "px";
              document.getElementsByClassName("resize-z")[0].style.marginBottom  = margin + "px";
              document.getElementsByClassName("resize-s")[0].style.marginBottom  = margin + "px";
              letterVibrationsRight(margin);
          }else{
              document.getElementsByClassName("resize-r")[0].style.marginRight ="0px";
              document.getElementsByClassName("resize-z")[0].style.marginRight ="0px";
              document.getElementsByClassName("resize-s")[0].style.marginRight = "0px";
              document.getElementsByClassName("resize-r")[0].style.marginBottom = "0px";
              document.getElementsByClassName("resize-z")[0].style.marginBottom  = "0px";
              document.getElementsByClassName("resize-s")[0].style.marginBottom  = "0px";
          }
      },10);
  }


  /***
   * Interval for how many times
   * the light effect should take place and
   * the time between each shine effect
   * */
  function lightingEffect() {
      var counter = 0;
      //console.log("haj?");
      var interval = setInterval(function () {
          counter++;
          lightningEffectOnResize(0);
          if(counter > 5){
              clearInterval(interval);
          }
      }, 2000);

  }

  /***
   * set and intervall between each element
   * that is going to shine, which is all the letters
   * in resize
   *
   * @param number
   * */
  function lightningEffectOnResize(number) {
      //console.log("haj2?");
      setTimeout(function () {
        if(number < 9){
            console.log(number);
            listDifferentLightning(number,0);
            number++;
            lightningEffectOnResize(number);
        }

      }, 100);
  }

  /**
   * change opacity so it feels likes it shining
   * and call function recursive to incresse the opacity
   *
   * @param val
   * @param opacity
   * */
  function listDifferentLightning(val, opacity) {
     // console.log("haj?3" + val);
      switch (val){
          case 0:
              setTimeout(function () {
                  console.log("haj?");
                  if(opacity < 1) {
                      opacity += 0.05;
                      console.log("haj?");
                      document.getElementsByClassName("resize-r")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
          case 1:
              setTimeout(function () {
                  console.log("haj?");
                  if(opacity < 1) {
                      opacity += 0.05;
                      console.log("haj?");
                      document.getElementsByClassName("resize-e")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
          case 2:
              setTimeout(function () {
                  if(opacity < 1) {
                      opacity += 0.05;
                      document.getElementsByClassName("resize-s")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
          case 3:
              setTimeout(function () {
                  if(opacity < 1) {
                      opacity += 0.05;
                      document.getElementsByClassName("resize-ione")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
          case 4:
              setTimeout(function () {
                  opacity += 0.05;
                  if(opacity < 1) {
                      document.getElementsByClassName("resize-z")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
          case 5:
              setTimeout(function () {
                  opacity += 0.05;
                  if(opacity < 1) {
                      document.getElementsByClassName("resize-itwo")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
          case 6:
              setTimeout(function () {
                  opacity += 0.05;
                  if(opacity < 1) {
                      document.getElementsByClassName("resize-n")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
          case 7:
              setTimeout(function () {
                  opacity += 0.05;
                  if(opacity < 1) {
                      document.getElementsByClassName("resize-g")[0].style.opacity = opacity;
                      listDifferentLightning(val,opacity);
                  }
              },50);
              break;
      }
  }
  /**
   * Intialize tile map
   * is loaded when the loading
   * screen initializes
   * */
  function drawLoadingContent(){
    for(var i = 0; i < mapArray.length; i++){
      for(var j = 0; j < mapArray.length; j++){
        if(parseInt(mapArray[i][j]) == 0){
          var div = document.createElement("div");
          div.className += " loading-content";
          loadingContent.appendChild(div)
        }
        if(parseInt(mapArray[i][j]) == 1){
          var div = document.createElement("div");
          div.className += " point-opened";
          loadingContent.appendChild(div)
        }
      }
    }
  }
  /**
   * get randomnumber
   * between 0-100
   * */
  function randomChild() {
      return Math.floor(Math.random() * 100);
  }

  /**
   * Redraw one of the child nodes
   * in a delay time out
   * each nodes is access by a random number
   * all numbers are check if they are already setted
   * by using a hashmap to store used values
   *
   * @param child
   * @param childrens
   * @param numberUsed
   * */
  function redrawChildNodes(child,childrens, numberUsed){
          setTimeout(function () {
              if (!checkIfNodeKeeperHasValue(numberUsed)) {
                  childrens[numberUsed].style.opacity = "1";
                  childrens[numberUsed].style.zIndex = "1001";
                  nodeKeeper[child] = numberUsed;
                  animateLoadingEnd(childrens[numberUsed], 0);
                  child++;
                  redrawChildNodes(child, childrens, randomChild());
              } else {
                  if (child < childrens.length) {
                      redrawChildNodes(child, childrens, randomChild())
                  }else{
                      console.log("end");
                     // preLoadContent(document.getElementById('load-container'),1);
                     // setMarginValuesForContent();
                     // hideDivLoadTime(resizeContainer);
                     // showDivLoadTime(pageWrapper);
                     // setTimeOutBeforeTheContentMoveIn();

                  }
              }
          }, 1)
  }
  /***
   * check if number already
   * exist in the nodeKeeper
   * return boolean true if it does
   * otherwise false
   * @param numberUsed
   * */
  function checkIfNodeKeeperHasValue(numberUsed) {
      for(var i = 0; i < Object.size(nodeKeeper); i++){
          if(nodeKeeper[i] == numberUsed){
              return true;
          }
      }
      return false;
  }
  /***
   *
   * @param obj
   * @return size of java object hashMap var new = {} :D
   * */
  Object.size = function(obj) {
        var size = 0, key;
        for (key in obj) {
            if (obj.hasOwnProperty(key)) size++;
        }
        return size;
    };
  /***
   * increase opacity of each
   * childnode placed in the animation loop
   * @param child
   * @parama opacity
   * */
  function animateLoadingEnd(child, opacity) {
      setTimeout(function () {
          if(opacity < 1) {
              opacity += 0.05;
              child.style.opacity = opacity;
              animateLoadingEnd(child, opacity)
          }
      },50)
  }

    /***
     * Preload the content
     * like a fade in function
     * @param child
     * @param opacity
     */
  function preLoadContent(child, opacity) {
      setTimeout(function () {
          if(opacity > 0) {
              opacity -= 0.05;
              child.style.opacity = opacity;
              preLoadContent(child, opacity)
          }
      },50)
  }



  function setTimeOutBeforeTheContentMoveIn() {
      setTimeout(function () {
          moveInContentToPage(-100,navBars.navMusic,'music');
          moveInContentToPage(-100,navBars.navContact,'contacts');
          moveInContentToPage(-100,navBars.navAbout,'about');
          moveInContentToPage(-100,navBars.navProjects,'projects');
      },1100)
  }
    /***
     * Move link content by using margin
     * Apply the margin based on which content
     * thats is going to move
     * Increasing margin recursive to get the move
     * animation
     * @param margin
     * @param element
     * @param style
     * */
  function moveInContentToPage(margin, element, style) {
      console.log("hello margin=:", margin);
      switch (style){
          case 'about':
              setTimeout(function () {
                  if(margin < 1) {
                      console.log("hih there", margin);
                      margin += 5;
                      element.style.marginLeft = margin + "px";
                      moveInContentToPage(margin, element, style);
                  }
              }, 10);
              break;
          case 'music':
              setTimeout(function () {
                  if(margin < 1) {
                      margin += 5;
                      element.style.marginTop = margin + "px";
                      moveInContentToPage(margin, element, style);
                  }
              }, 10);
              break;
          case 'projects':
              setTimeout(function () {
                  if(margin < 1) {
                      margin += 5;
                      element.style.marginBottom = margin + "px";
                      moveInContentToPage(margin, element, style);
                  }
              }, 10);
              break;
          case 'contacts':
              setTimeout(function () {
                  if(margin < 1) {
                      margin += 5;
                      element.style.marginRight = margin + "px";
                      moveInContentToPage(margin, element, style);
                  }
              }, 10);
              break;
      }
  }

    /**
     * Set dem marginvalues for drop in animation
     */
  function setMarginValuesForContent() {
      //nav about init
      navBars.navAbout.style.marginLeft = "-100px";
      navBars.navAbout.style.overflow = "hidden";

      //nav contact init
      navBars.navContact.style.marginRight = "-100px";
      navBars.navContact.style.overflow = "hidden";
      navBars.navContact.style.right = "0";
      document.getElementById('text-contacts').style.overflow = "hidden";

      //nav music init
      navBars.navMusic.style.marginTop = "-100px";
      navBars.navMusic.style.overflow = "hidden";

      //nav project init
      navBars.navProjects.style.marginBottom = "-100px";
      navBars.navProjects.style.overflow = "hidden";
  }

  function hideDive(div) {
      div.style.visibility = 'hidden';
      div.style.display = 'none';
  }
  function hideDivLoadTime(div) {
      setTimeout(function () {
          div.style.visibility = 'hidden';
          div.style.display = 'none';
      },1000)
  }
  function showDivLoadTime(div) {
    setTimeout(function () {
      div.style.visibility = 'visible';
      div.style.display = 'block';          // Show
      div.style.display = 'inline';         // Show
      div.style.display = 'inline-block';
    },1000)
  }
  init();
});


</script>
<nav>
</nav>
<div id="super-container">
  <div id="resize-container">
    <div id="load-container"></div>
    <div id="load-text">
      <div class="loading-parent">
        <ul id="loading-list">
        </ul>
      </div>
    </div>
  </div>

   <a class="navItem navItemMusic" id="navMusic" rel="Music">
     <span class="text" id="text-music">Music</span>
   </a>
   <a class="navItem navItemContact" id="navContact" rel="Contact">
     <span class="text" id="text-contacts">
     Contact</span>
   </a>
   <a class="navItem navItemProjects" id="navProjects" rel="Projects">
     <span class="text" id="text-projects">Projects</span>
   </a>
   <a class="navItem navItemAbout"  id="navAbout" rel="About">
     <span class="text">About</span>
   </a>
  <div id="page-wrapper">

  </div>
</div>
